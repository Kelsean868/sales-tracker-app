rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(docData) {
      return request.auth.uid == docData.userId;
    }

    function isSuperAdmin() {
      return request.auth.token.role == 'super_admin';
    }
    
    function isAdmin() {
      return request.auth.token.role == 'admin';
    }

    function isManager() {
      return request.auth.token.role in ['regional_manager', 'branch_manager', 'unit_manager'];
    }

    function canManage(docData) {
      return isSuperAdmin() || isAdmin() || 
             (request.auth.token.role == 'regional_manager' && request.auth.token.regionId == docData.regionId) ||
             (request.auth.token.role == 'branch_manager' && request.auth.token.branchId == docData.branchId) ||
             (request.auth.token.role == 'unit_manager' && request.auth.token.unitId == docData.unitId);
    }
    
    // --- Collection Rules ---

    match /users/{userId} {
      allow read: if isSignedIn();
      allow update: if request.auth.uid == userId || isSuperAdmin() || isAdmin();
      // Only admins should create users through the backend function
      allow create: if isSuperAdmin() || isAdmin();
    }

    match /activities/{activityId} {
      allow read: if isOwner(resource.data) || canManage(resource.data);
      allow create: if isOwner(request.resource.data);
      allow update, delete: if isOwner(resource.data);
    }

    match /leads/{leadId} {
      allow read: if isOwner(resource.data) || canManage(resource.data);
      allow create: if isOwner(request.resource.data);
      allow update, delete: if isOwner(resource.data);
    }

    match /clients/{clientId} {
      allow read: if isOwner(resource.data) || canManage(resource.data);
      allow create: if isOwner(request.resource.data);
      allow update, delete: if isOwner(resource.data);
    }

    match /contacts/{contactId} {
      allow read: if isOwner(resource.data) || canManage(resource.data);
      allow create: if isOwner(request.resource.data);
      allow update, delete: if isOwner(resource.data);
    }

    match /policies/{policyId} {
      allow read: if isOwner(resource.data) || canManage(resource.data);
      allow create: if isOwner(request.resource.data);
      allow update, delete: if isOwner(resource.data);
    }

    match /goals/{goalId} {
      allow read: if isOwner(resource.data) || canManage(resource.data);
      allow create: if isOwner(request.resource.data);
      allow update, delete: if isOwner(resource.data);
    }
    
    // Leaderboard should be read-only for clients, writable by backend functions.
    match /leaderboard/{docId} {
      allow read: if isSignedIn();
      allow write: if false; // Only backend can write
    }

    // Organizational structure documents
    match /regions/{docId} { allow read: if isSignedIn(); allow write: if isSuperAdmin() || isAdmin(); }
    match /branchs/{docId} { allow read: if isSignedIn(); allow write: if isSuperAdmin() || isAdmin() || isManager(); }
    match /units/{docId} { allow read: if isSignedIn(); allow write: if isSuperAdmin() || isAdmin() || isManager(); }
    match /teams/{docId} { allow read: if isSignedIn(); allow write: if isSuperAdmin() || isAdmin() || isManager(); }

    match /workHistory/{docId} {
      allow read, create: if isOwner(request.resource.data);
    }
  }
}
